#include <limits.h>
#include <stdio.h>
#include <stdbool.h>
#define V 100
int
minDistance (int dist[], int vis[], int n)
{
  int min = INT_MAX, min_index;
  for (int i = 0; i < n; i++)
    if (vis[i] == 0 && dist[i] <= min)
      min = dist[i], min_index = i;
  return min_index;
}

void
printSolution (int dist[], int n)
{
  printf ("Vertex \t\t Distance from Source\n");
  for (int i = 0; i < n; i++)
    printf ("%d \t\t %d\n", i, dist[i]);
}

void
dijkstra (int graph[V][V], int src, int n)
{
  int dist[n];
  int vis[n];
  for (int i = 0; i < n; i++)
    dist[i] = INT_MAX, vis[i] = 0;
  dist[src] = 0;
  for (int count = 0; count < n - 1; count++)
    {
      int u = minDistance (dist, vis, n);
      vis[u] = 1;
      for (int v = 0; v < n; v++)
	if (!vis[v] && graph[u][v] && dist[u] != INT_MAX
	    && dist[u] + graph[u][v] < dist[v])
	  dist[v] = dist[u] + graph[u][v];
    }
  printSolution (dist, n);
}

void
main ()
{
  int graph[V][V];
  int n, i, j;
  printf ("Enter number of nodes: ");
  scanf ("%d", &n);
  for (i = 0; i < n; i++)
    {
      printf ("Enter distance from node %d:\n", (i + 1));
      for (j = 0; j < n; j++)
	{
	  printf ("Node %d: ", j + 1);
	  scanf ("%d", &graph[i][j]);
	}
    }
  dijkstra (graph, 0, n);
}
